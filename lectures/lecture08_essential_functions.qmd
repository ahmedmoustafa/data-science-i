---
title: "Essential Functions"
format:
  revealjs:
    slide-number: true
    preview-links: true
    scrollable: true
---

```{r echo=FALSE,message=FALSE}
library(printr)
```

## Unique
- The `unique()` function removes duplicated elements from a vector or data frame.
- Example: `unique()`
```{r echo=TRUE}
x = c(1, 2, 2, 3, 4, 4, 5)
unique(x)
```


## Any and All
- `any()` returns `TRUE` if any of the values are `TRUE`.
- `all()` returns `TRUE` if all of the values are `TRUE`.

- Example: `any()`
```{r echo=TRUE}
v = c(FALSE, FALSE, TRUE)
any(v)
```

- Example: `all()`
```{r echo=TRUE}
all(v)
```

# Set Functions
- Set functions perform operations on sets of elements.
- Common functions include `union`, `intersect`, `setdiff`, and `setequal`.

# Mathematical Definitions of Set Operations

- **Set**: A collection of distinct elements.

## Union (A ∪ B)
- The set of all elements in A, or in B, or in both.
- $A \cup B = \{x | x \in A \text{ or } x \in B\}$
- `union()`
- Example:
```{r echo=TRUE}
A = c(1, 2, 3, 4)
B = c(3, 4, 5, 6)
union(A, B)
```

## Intersection (A ∩ B)
- The set of all elements that are both in A and B.
- $A \cap B = \{x | x \in A \text{ and } x \in B\}$
- `intersect()`
- Example:
```{r echo=TRUE}
A = c(1, 2, 3, 4)
B = c(3, 4, 5, 6)
intersect(A, B)
```

## Set Difference (A - B)
- The set of all elements that are in A but not in B.
- $A - B = \{x | x \in A \text{ and } x \notin B\}$
- `setdiff()`
- Example:
```{r echo=TRUE}
A = c(1, 2, 3, 4)
B = c(3, 4, 5, 6)
setdiff(A, B)
```

## Complement (A^C)
- The set of all elements not in A.
- $A^C = \{x | x \notin A\}$

## Subset (A ⊆ B)
- A is a subset of B if every element of A is also an element of B.
- $A \subseteq B \iff (\forall x)(x \in A \implies x \in B)$
- Example:

```{r echo=TRUE}
A = c(1, 2, 3, 4)
all(A %in% c(1, 2, 3, 4, 5))
```

```{r echo=TRUE}
all(A %in% c(1, 2, 3))
```

## Set Equality (A = B)
- Two sets are equal if they have exactly the same elements.
- $A = B \iff (A \subseteq B) \text{ and } (B \subseteq A)$
- `setequal()`
- Example:
```{r echo=TRUE}
A = c(1, 2, 3, 4)
B = c(3, 4, 5, 6)
setequal(A, B)
```

# Sample
- The `sample` function draws random samples from a vector.

## Syntax
```R
sample(x, size, replace = FALSE, prob = NULL)
```

## Example
```{r}
sample(1:10, 5)
```

---

# Cbind and Rbind
- `cbind` combines vectors, matrices, or data frames by columns.
- `rbind` combines vectors, matrices, or data frames by rows.

## Example: `cbind`
```{r}
A <- matrix(1:4, ncol=2)
B <- matrix(5:8, ncol=2)
cbind(A, B)
```

## Example: `rbind`
```{r}
rbind(A, B)
```

---

# Ifelse
- The `ifelse` function applies a function to elements of a vector depending on a condition.

## Ifelse Flowchart
```{mermaid}
flowchart TD
  A[Vector Element] -->|Test Condition| B{Test Result?}
  B -->|TRUE| C[Apply "yes" Expression]
  B -->|FALSE| D[Apply "no" Expression]
```

## Example
```{r}
nums <- 1:10
ifelse(nums %% 2 == 0, "Even", "Odd")
```

---

# Testing Data Types
- R provides functions to test the data type of a variable.

## Data Type Testing Flowchart
```{mermaid}
flowchart TD
  A[Variable] -->|is.character?| B{Result}
  A -->|is.numeric?| C{Result}
  A -->|is.na?| D{Result}
  A -->|is.vector?| E{Result}
  A -->|is.matrix?| F{Result}
  A -->|is.data.frame?| G{Result}
  A -->|is.factor?| H{Result}
```

## Examples
```{r}
is.character("Hello")
is.numeric(10)
is.na(NA)
is.vector(c(1, 2, 3))
is.matrix(matrix(1:4, ncol=2))
is.data.frame(data.frame(x=1:4, y=4:1))
is.factor(factor(c("a", "b", "a")))
```

---

# Exercises
1. Create a vector of numbers and find the unique values.
2. Use `setdiff` to find the difference between two sets of characters.
3. Generate a random sample of size 10 from the numbers 1 to 100, with replacement.
4. Combine two data frames using `rbind` and `cbind`.
5. Use `ifelse` to categorize a vector of numbers into "High" and "Low" based on a threshold.
6. Test the data type of different R objects using the functions discussed.

---

# Solutions
## Exercise 1
```{r}
nums <- c(1, 2, 3, 4, 3, 2, 1, 5)
unique(nums)
```

## Exercise 2
```{r}
set1 <- c("a", "b", "c", "d")
set2 <- c("c", "d", "e", "f")
setdiff(set1, set2)
```

## Exercise 3
```{r}
sample(1:100, 10, replace = TRUE)
```

## Exercise 4
```{r}
df1 <- data.frame(A=1:3, B=4:6)
df2 <- data.frame(A=7:9, B=10:12)
rbind(df1, df2)
cbind(df1, df2)
```

## Exercise 5
```{r}
nums <- c(10, 20, 5, 15, 25)
threshold <- 15
ifelse(nums > threshold, "High", "Low")
```

## Exercise 6
```{r}
is.character("Hello")
is.numeric(10)
is.na(NA)
is.vector(c(1, 2, 3))
is.matrix(matrix(1:4, ncol=2))
is.data.frame(data.frame(x=1:4, y=4:1))
is.factor(factor(c("a", "b", "a")))
```

---

# Conclusion
- Today, we've covered a variety of essential functions in R, all of which are fundamental for data manipulation and analysis.
- Understanding and mastering these functions will streamline your workflow and enhance your data analysis capabilities.
- Remember, practice is key! Continue to experiment and apply these functions to different datasets to solidify your knowledge.
- Stay curious, keep learning, and happy coding in R!
